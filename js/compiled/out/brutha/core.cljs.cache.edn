;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name brutha.core, :imports nil, :requires {cljsjs.react cljsjs.react}, :uses nil, :defs {mount {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 92, :column 7, :end-line 92, :end-column 12, :arglists (quote ([element node]))}, :name brutha.core/mount, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 12, :method-params ([element node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([element node]))}, did-mount {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 11, :column 4, :end-line 11, :end-column 13, :protocol brutha.core/IDidMount, :doc nil, :arglists (quote ([this value node]))}, :protocol brutha.core/IDidMount, :name brutha.core/did-mount, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 13, :method-params ([this value node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 11, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this value node])), :doc nil}, should-update? {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 5, :column 4, :end-line 5, :end-column 18, :protocol brutha.core/IShouldUpdate, :doc nil, :arglists (quote ([this value next-value]))}, :protocol brutha.core/IShouldUpdate, :name brutha.core/should-update?, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 18, :method-params ([this value next-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 5, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this value next-value])), :doc nil}, IDidMount {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 10, :column 14, :end-line 10, :end-column 23, :doc nil, :protocol-symbol true, :protocol-info {:methods {did-mount [[this value node]]}}}, :protocol-symbol true, :name brutha.core/IDidMount, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 23, :column 1, :line 10, :protocol-info {:methods {did-mount [[this value node]]}}, :info nil, :end-line 10, :impls #{}, :doc nil}, IWillUpdate {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 13, :column 14, :end-line 13, :end-column 25, :doc nil, :protocol-symbol true, :protocol-info {:methods {will-update [[this value next-value node]]}}}, :protocol-symbol true, :name brutha.core/IWillUpdate, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 25, :column 1, :line 13, :protocol-info {:methods {will-update [[this value next-value node]]}}, :info nil, :end-line 13, :impls #{}, :doc nil}, react-factory {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 70, :column 8, :end-line 70, :end-column 21, :private true, :arglists (quote ([behavior]))}, :private true, :name brutha.core/react-factory, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 21, :method-params ([behavior]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([behavior]))}, req-anim-frame {:name brutha.core/req-anim-frame, :file "resources/public/js/compiled/out/brutha/core.cljs", :line 87, :column 1, :end-line 87, :end-column 30, :private true, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 87, :column 16, :end-line 87, :end-column 30, :private true}}, *force-update* {:name brutha.core/*force-update*, :file "resources/public/js/compiled/out/brutha/core.cljs", :line 22, :column 1, :end-line 22, :end-column 30, :dynamic true, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 22, :column 16, :end-line 22, :end-column 30, :dynamic true}}, IRender {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 19, :column 14, :end-line 19, :end-column 21, :doc nil, :protocol-symbol true, :protocol-info {:methods {render [[this value]]}}}, :protocol-symbol true, :name brutha.core/IRender, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 21, :column 1, :line 19, :protocol-info {:methods {render [[this value]]}}, :info nil, :end-line 19, :impls #{}, :doc nil}, component {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 73, :column 7, :end-line 73, :end-column 16, :arglists (quote ([behavior]))}, :name brutha.core/component, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 16, :method-params ([behavior]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([behavior]))}, did-update {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 17, :column 4, :end-line 17, :end-column 14, :protocol brutha.core/IDidUpdate, :doc nil, :arglists (quote ([this value prev-value node]))}, :protocol brutha.core/IDidUpdate, :name brutha.core/did-update, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 14, :method-params ([this value prev-value node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this value prev-value node])), :doc nil}, IDidUpdate {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 16, :column 14, :end-line 16, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {did-update [[this value prev-value node]]}}}, :protocol-symbol true, :name brutha.core/IDidUpdate, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 24, :column 1, :line 16, :protocol-info {:methods {did-update [[this value prev-value node]]}}, :info nil, :end-line 16, :impls #{}, :doc nil}, will-mount {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 8, :column 4, :end-line 8, :end-column 14, :protocol brutha.core/IWillMount, :doc nil, :arglists (quote ([this value]))}, :protocol brutha.core/IWillMount, :name brutha.core/will-mount, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 14, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, IWillMount {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 7, :column 14, :end-line 7, :end-column 24, :doc nil, :protocol-symbol true, :protocol-info {:methods {will-mount [[this value]]}}}, :protocol-symbol true, :name brutha.core/IWillMount, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 24, :column 1, :line 7, :protocol-info {:methods {will-mount [[this value]]}}, :info nil, :end-line 7, :impls #{}, :doc nil}, react-methods {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 24, :column 8, :end-line 24, :end-column 21, :private true, :arglists (quote ([behavior]))}, :private true, :name brutha.core/react-methods, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 21, :method-params ([behavior]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([behavior]))}, render {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 20, :column 4, :end-line 20, :end-column 10, :protocol brutha.core/IRender, :doc nil, :arglists (quote ([this value]))}, :protocol brutha.core/IRender, :name brutha.core/render, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 10, :method-params ([this value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this value])), :doc nil}, IShouldUpdate {:meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 4, :column 14, :end-line 4, :end-column 27, :doc nil, :protocol-symbol true, :protocol-info {:methods {should-update? [[this value next-value]]}}}, :protocol-symbol true, :name brutha.core/IShouldUpdate, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 27, :column 1, :line 4, :protocol-info {:methods {should-update? [[this value next-value]]}}, :info nil, :end-line 4, :impls #{}, :doc nil}, will-update {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 14, :column 4, :end-line 14, :end-column 15, :protocol brutha.core/IWillUpdate, :doc nil, :arglists (quote ([this value next-value node]))}, :protocol brutha.core/IWillUpdate, :name brutha.core/will-update, :variadic false, :file "resources/public/js/compiled/out/brutha/core.cljs", :end-column 15, :method-params ([this value next-value node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 14, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this value next-value node])), :doc nil}, refresh-queued {:name brutha.core/refresh-queued, :file "resources/public/js/compiled/out/brutha/core.cljs", :line 85, :column 1, :end-line 85, :end-column 30, :private true, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/resources/public/js/compiled/out/brutha/core.cljs", :line 85, :column 16, :end-line 85, :end-column 30, :private true}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:key}, :order [:key]}, :doc nil}