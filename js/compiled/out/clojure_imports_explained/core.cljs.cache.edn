;; Analyzed by ClojureScript 0.0-3297
{:use-macros nil, :excludes #{}, :name clojure-imports-explained.core, :imports nil, :requires {react brutha.core, brutha.core brutha.core, dom flupot.dom, flupot.dom flupot.dom}, :uses nil, :defs {anchor {:name clojure-imports-explained.core/anchor, :file "src/clojure_imports_explained/core.cljs", :line 12, :column 1, :end-line 12, :end-column 12, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 12, :column 6, :end-line 12, :end-column 12}}, clojure-docs-require {:name clojure-imports-explained.core/clojure-docs-require, :file "src/clojure_imports_explained/core.cljs", :line 32, :column 1, :end-line 32, :end-column 26, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 32, :column 6, :end-line 32, :end-column 26}}, paragraph {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([text])), :doc "Paragraph text with some prose styling"}, :name clojure-imports-explained.core/paragraph, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 16, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text])), :doc "Paragraph text with some prose styling"}, clojure-docs-import {:name clojure-imports-explained.core/clojure-docs-import, :file "src/clojure_imports_explained/core.cljs", :line 33, :column 1, :end-line 33, :end-column 25, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 33, :column 6, :end-line 33, :end-column 25}}, clojure-docs-ns {:name clojure-imports-explained.core/clojure-docs-ns, :file "src/clojure_imports_explained/core.cljs", :line 31, :column 1, :end-line 31, :end-column 21, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 31, :column 6, :end-line 31, :end-column 21}}, example-component {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 20, :column 7, :end-line 20, :end-column 24, :arglists (quote ([prose declaration]))}, :name clojure-imports-explained.core/example-component, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 24, :method-params ([prose declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([prose declaration]))}, prose-anchor {:name clojure-imports-explained.core/prose-anchor, :file "src/clojure_imports_explained/core.cljs", :line 13, :column 1, :end-line 13, :end-column 18, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 13, :column 6, :end-line 13, :end-column 18}}, namespace-component {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 15, :column 7, :end-line 15, :end-column 26, :arglists (quote ([namespace-declaration]))}, :name clojure-imports-explained.core/namespace-component, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 26, :method-params ([namespace-declaration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([namespace-declaration]))}, prose-stuff {:name clojure-imports-explained.core/prose-stuff, :file "src/clojure_imports_explained/core.cljs", :line 45, :column 1, :end-line 45, :end-column 17, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 45, :column 6, :end-line 45, :end-column 17}}, example-namespace {:name clojure-imports-explained.core/example-namespace, :file "src/clojure_imports_explained/core.cljs", :line 27, :column 1, :end-line 27, :end-column 23, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 27, :column 6, :end-line 27, :end-column 23}}, app-state {:name clojure-imports-explained.core/app-state, :file "src/clojure_imports_explained/core.cljs", :line 11, :column 1, :end-line 11, :end-column 19, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 11, :column 10, :end-line 11, :end-column 19}}, docs-url {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 30, :column 7, :end-line 30, :end-column 15, :arglists (quote ([item]))}, :name clojure-imports-explained.core/docs-url, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 15, :method-params ([item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([item]))}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 72, :column 7, :end-line 72, :end-column 19, :arglists (quote ([]))}, :name clojure-imports-explained.core/on-js-reload, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, code {:protocol-inline nil, :meta {:file "/Users/adrian/github/sch/clojure-imports-explained/src/clojure_imports_explained/core.cljs", :line 43, :column 7, :end-line 43, :end-column 11, :arglists (quote ([text]))}, :name clojure-imports-explained.core/code, :variadic false, :file "src/clojure_imports_explained/core.cljs", :end-column 11, :method-params ([text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([text]))}}, :require-macros {dom flupot.dom, flupot.dom flupot.dom}, :cljs.analyzer/constants {:seen #{:name :requires :text}, :order [:text :name :requires]}, :doc nil}